CFLAGS := -std=gnu11
CFLAGS += -iquote .

ifeq ($(shell hostname),Bacon)
CFLAGS += -DUSE_QWERTY_LAYOUT=1
endif

ifeq ($(SUPPORT_QWERTY),1)
CFLAGS += -DUSE_QWERTY_LAYOUT=1
endif

include ./commons.mk

BUILD_DIR := .build
OUT := my_rpg

OUT_DEBUG := debug

LDFLAGS := -fwhole-program -flto
LDFLAGS += -L $(BUILD_DIR) -lquell

LDLIBS += -lcsfml-audio
LDLIBS += -lcsfml-graphics
LDLIBS += -lcsfml-system
LDLIBS += -lcsfml-window
LDLIBS += -lm

LIB := $(BUILD_DIR)/libquell.a

include ./sourcelist.mk
vpath %.c $(VPATH)

OBJ := $(SRC:%.c=$(BUILD_DIR)/release/%.o)
OBJ_DEBUG := $(subst release,debug,$(OBJ))

DEP := $(OBJ:.o=.d)
DEP_DEBUG := $(OBJ_DEBUG:.o=.d)

-include hook.begin.mk

.DEFAULT_GOAL: all

.PHONY: all # _ Default target, builds the rpg
all: $(OUT)

.PHONY: allbin # _ Build every binaries available
allbin: $(OUT) $(OUT_DEBUG)

.PHONY: help # _ Show this help message
help:
	@ cat $(firstword $(MAKEFILE_LIST)) \
		| grep -E "^.PHONY:" | cut -d ' ' -f 2,4- | sed 's/_/		/g'

define mk-obj-recipe

$$(BUILD_DIR)/$(strip $1)/%.o: %.c
	@ mkdir -p $$(dir $$@)
	$$Q $$(CC) -DRESOURCE_DIR=$$(RESOURCE_DIR) $$(CFLAGS) -o $$@ -c $$<
	@ $$(LOG_TIME) "CC $$(C_PURPLE) $$(notdir $$@) $$(C_RESET)"

endef

$(OUT): $(LIB) $(OBJ)
	@ mkdir -p $(dir $@)
	$Q $(CC) -o $@ $(OBJ) $(CFLAGS) $(LDLIBS) $(LDFLAGS)
	@ $(LOG_TIME) "LD $(C_GREEN) $@ $(C_RESET)"

$(eval $(call mk-obj-recipe, release))

$(OUT_DEBUG): CFLAGS += -g3
$(OUT_DEBUG): CFLAGS += -DQL_DEBUG_MODE=1
$(OUT_DEBUG): $(LIB) $(OBJ_DEBUG)
	@ mkdir -p $(dir $@)
	$Q $(CC) -o $@ $(OBJ_DEBUG) $(CFLAGS) $(LDLIBS) $(LDFLAGS)
	@ $(LOG_TIME) "LD $(C_GREEN) $(notdir $@) $(C_RESET)"

$(eval $(call mk-obj-recipe, debug))

$(LIB):
	@ $(MAKE) -C quell -j --no-print-directory
	@ $(LOG_TIME) $@

unquote = $(subst ",,$(subst ',,$(1)))##") ## <- Hack to make highlighter happy

.PHONY: clean # _ Removing intermediate file generated by compilation
clean: files := $(OBJ) $(OBJ_DEBUG)
clean:
	$(eval REMOVED =                           \
		$(shell                                \
			$(RM) -v $(files)                  \
			| grep "removed" | cut -d ' ' -f 2))
	@ $(call LOG_TIME) $(if                    \
		$(REMOVED),                            \
		"removed $(call unquote, $(REMOVED))", \
		"no file removed.")

.PHONY: fclean # _ cleans, remove also binaries
fclean: bins := $(OUT) $(OUT_DEBUG)
fclean: clean
	$(eval REMOVED =                           \
		$(shell $(RM) -v $(bins)               \
			| grep "removed" | cut -d ' ' -f 2))
	@ $(call LOG_TIME) $(if $(REMOVED),        \
		"removed $(call unquote, $(REMOVED))", \
		"nothing to remove.")

.PHONY: re # _ fcleans, and reubild the main binary
.NOTPARALLEL: re
re: fclean all

-include hook.end.mk
